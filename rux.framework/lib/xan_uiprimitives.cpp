#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <xan_uiprimitives.h>
#include <xan_uipath.h>
#include <xan_uirectangle.h>
namespace rux
{
	namespace gui
	{
		rux::gui::controls::Group& XPrimitives::Cogwheel( void )
		{
			rux::gui::controls::XPath ui_path;
			ui_path.AddPoint( ::rux::gui::Point( 0.4f , 0.2f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.6f , 0.2f , ::rux::gui::XEnum_PointUnit_Percent ) );
	
			ui_path.AddPoint( ::rux::gui::Point( 1.f , 0.45f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 1.f , 0.55f , ::rux::gui::XEnum_PointUnit_Percent ) );

			ui_path.AddPoint( ::rux::gui::Point( 0.6f , 0.8f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.4f , 0.8f , ::rux::gui::XEnum_PointUnit_Percent ) );

			ui_path.AddPoint( ::rux::gui::Point( 0.f , 0.45f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.f , 0.55f , ::rux::gui::XEnum_PointUnit_Percent ) );
	
			ui_path.set_Left( 0 );
			ui_path.set_Top( 0 );
			ui_path.set_Width( 1 );
			ui_path.set_Height( 1 );
			ui_path.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_path.set_Background( ::rux::gui::Colors::Red() );
			declare_variable( ::rux::gui::controls::XGroup , ui_group );
			ui_group.set_Left( 20 );
			ui_group.set_Top( 20 );
			ui_group.set_Width( 50 );
			ui_group.set_Height( 50 );
			//ui_group.set_PointUnit( point_unit );
			rux::XString error;
			ui_group.AddControl( ui_path , error );
			return ui_group++;
		};
		rux::gui::controls::Group& XPrimitives::Plus( float left , float top , float width , float height , ::rux::gui::XEnum_PointUnit point_unit , ::rux::gui::ColorBase* background )
		{
			rux::gui::controls::XPath ui_path;
			ui_path.AddPoint( ::rux::gui::Point( 0.33f , 0 , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.33f , 0.33f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0 , 0.33f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0 , 0.66f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.33f , 0.66f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.33f , 1 , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.66f , 1 , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.66f , 0.66f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 1 , 0.66f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 1 , 0.33f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.66f , 0.33f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.66f , 0 , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.set_Left( 0 );
			ui_path.set_Top( 0 );
			ui_path.set_Width( 1 );
			ui_path.set_Height( 1 );
			ui_path.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_path.set_Background( background );
			declare_variable( ::rux::gui::controls::XGroup , ui_group );
			ui_group.set_Left( left );
			ui_group.set_Top( top );
			ui_group.set_Width( width );
			ui_group.set_Height( height );
			ui_group.set_PointUnit( point_unit );
			rux::XString error;
			ui_group.AddControl( ui_path , error );
			declare_variable( ::rux::gui::controls::XGroup , group );
			group.AddControl( ui_group , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::Star( float left , float top , float width , float height , ::rux::gui::XEnum_PointUnit point_unit , ::rux::gui::ColorBase* background )
		{
			rux::gui::controls::XPath ui_path;
			ui_path.AddPoint( ::rux::gui::Point( 0.5 , 0 , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.35f , 0.33f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0 , 0.33f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.28f , 0.58f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.15f , 0.9f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.5f , 0.69f , ::rux::gui::XEnum_PointUnit_Percent ) );	
			ui_path.AddPoint( ::rux::gui::Point( 0.85f , 0.9f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.72f , 0.58f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 1 , 0.33f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.AddPoint( ::rux::gui::Point( 0.65f , 0.33f , ::rux::gui::XEnum_PointUnit_Percent ) );
			ui_path.set_Left( 0 );
			ui_path.set_Top( 0 );
			ui_path.set_Width( 1 );
			ui_path.set_Height( 1 );
			ui_path.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_path.set_Background( background );
			declare_variable( ::rux::gui::controls::XGroup , ui_group );
			ui_group.set_Left( left );
			ui_group.set_Top( top );
			ui_group.set_Width( width );
			ui_group.set_Height( height );
			ui_group.set_PointUnit( point_unit );
			rux::XString error;
			ui_group.AddControl( ui_path , error );
			return ui_group++;
		};
		rux::gui::controls::Button& XPrimitives::TransparentButton( void )
		{
			declare_variable( rux::gui::controls::XButton , ui_button );
			ui_button.set_Background( create_color( 255 , 255 , 255 , (uint8)( 255.0 * 0.2 ) ) );
			ui_button.set_OverBackground( create_color( 255 , 255 , 255 , 0x66 ) );
			ui_button.set_PressedBackground( create_color( 0x42 , 0xB6 , 0xE4 , 0xff ) );
			ui_button.set_Corner( ::rux::gui::Thickness( 0.0 , 0.0 , 0.0 , 0.0 ) );
			return ui_button++;
		};
		rux::gui::controls::Group& XPrimitives::Camera( void )
		{
			declare_variable( ::rux::gui::controls::XGroup , ui_group );
			rux::gui::controls::XRectangle ui_rect;
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );	
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Background( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_Corner( ::rux::gui::Thickness( 0 , 0.5 , 0 , 0.5 ) );
			ui_rect.set_Width( 0.8f );
			ui_rect.set_Height( 0.7f );
			rux::XString error;
			ui_group.AddControl( ui_rect , error );

			ui_rect = ::rux::gui::controls::XRectangle();
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );	
			ui_rect.set_HorizontalAlignment( XEnum_Alignment_Center );
			ui_rect.set_VerticalAlignment( XEnum_Alignment_Center );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_Corner( ::rux::gui::Thickness( 1 , 1 , 1 , 1 ) );
			ui_rect.set_BorderWidth( 2 );	
			ui_rect.set_Width( 0.3f );
			ui_rect.set_Height( 0.3f );
			//ui_group.AddControl( ui_rect );
			//ui_rect;
			//ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );	
			/*ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 , 1 ) );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff , 1 ) );
			ui_rect.set_Corner( ::rux::gui::Thickness( 1 , 1 , 1 , 1 ) );
			ui_rect.set_BorderWidth( 2 );
			ui_rect.set_Left( 5 );
			ui_rect.set_Top( 5 );
			ui_rect.set_Width( 15 );
			ui_rect.set_Height( 15 );
			ui_group.AddControl( ui_rect );*/
			return ui_group++;
		};
		rux::gui::controls::Group& XPrimitives::ReelOfFilm( void )
		{
			declare_variable( ::rux::gui::controls::XGroup , ui_group );
			rux::gui::controls::XRectangle ui_rect;
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Left( 0.1f );
			ui_rect.set_Top( 0.1f );
			ui_rect.set_Width( 0.16f );
			ui_rect.set_Height( 0.16f );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_BorderWidth( 1 );
			rux::XString error;
			ui_group.AddControl( ui_rect , error );
			ui_rect = ::rux::gui::controls::XRectangle();
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Left( 0.1f );
			ui_rect.set_Top( 0.26f );
			ui_rect.set_Width( 0.16f );
			ui_rect.set_Height( 0.16f );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_BorderWidth( 1 );
			ui_group.AddControl( ui_rect , error );
			ui_rect = ::rux::gui::controls::XRectangle();
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Left( 0.1f );
			ui_rect.set_Top( 0.42f );
			ui_rect.set_Width( 0.16f );
			ui_rect.set_Height( 0.16f );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_BorderWidth( 1 );
			ui_group.AddControl( ui_rect , error );
			ui_rect = ::rux::gui::controls::XRectangle();
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Left( 0.1f );
			ui_rect.set_Top( 0.58f );
			ui_rect.set_Width( 0.16f );
			ui_rect.set_Height( 0.16f );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_BorderWidth( 1 );
			ui_group.AddControl( ui_rect , error );
			ui_rect = ::rux::gui::controls::XRectangle();
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Left( 0.1f );
			ui_rect.set_Top( 0.74f );
			ui_rect.set_Width( 0.16f );
			ui_rect.set_Height( 0.16f );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_BorderWidth( 1 );
			ui_group.AddControl( ui_rect , error );
			ui_rect = ::rux::gui::controls::XRectangle();
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Left( 0.74f );
			ui_rect.set_Top( 0.1f );
			ui_rect.set_Width( 0.16f );
			ui_rect.set_Height( 0.16f );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_BorderWidth( 1 );
			ui_group.AddControl( ui_rect , error );
			ui_rect = ::rux::gui::controls::XRectangle();
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Left( 0.74f );
			ui_rect.set_Top( 0.26f );
			ui_rect.set_Width( 0.16f );
			ui_rect.set_Height( 0.16f );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_BorderWidth( 1 );
			ui_group.AddControl( ui_rect , error );
			ui_rect = ::rux::gui::controls::XRectangle();
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Left( 0.74f );
			ui_rect.set_Top( 0.42f );
			ui_rect.set_Width( 0.16f );
			ui_rect.set_Height( 0.16f );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_BorderWidth( 1 );
			ui_group.AddControl( ui_rect , error );
			ui_rect = ::rux::gui::controls::XRectangle();
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Left( 0.74f );
			ui_rect.set_Top( 0.58f );
			ui_rect.set_Width( 0.16f );
			ui_rect.set_Height( 0.16f );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_BorderWidth( 1 );
			ui_group.AddControl( ui_rect , error );
			ui_rect = ::rux::gui::controls::XRectangle();
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Left( 0.74f );
			ui_rect.set_Top( 0.74f );
			ui_rect.set_Width( 0.16f );
			ui_rect.set_Height( 0.16f );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_BorderWidth( 1 );
			ui_group.AddControl( ui_rect , error );
			ui_rect = ::rux::gui::controls::XRectangle();
			ui_rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			ui_rect.set_Background( create_color( 0 , 0 , 0 , 0 ) );
			ui_rect.set_Left( 0.26f );
			ui_rect.set_Top( 0.2f );
			ui_rect.set_Width( 0.48f );
			ui_rect.set_Height( 0.6f );
			ui_rect.set_BorderColor( create_color( 0xd2 , 0xd4 , 0xd2 , 0xff ) );
			ui_rect.set_BorderWidth( 1 );
			ui_group.AddControl( ui_rect , error );
			return ui_group++;
		};
		rux::gui::controls::Group& XPrimitives::LeftArrow( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XPath arrow;	
			arrow.set_HorizontalFilling( XEnum_Filling_Auto );
			arrow.set_VerticalFilling( XEnum_Filling_Auto );
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.25f , 0.5f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.75f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.75f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			rux::XString error;
			group.AddControl( arrow , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::RightArrow( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XPath arrow;	
			arrow.set_HorizontalFilling( XEnum_Filling_Auto );
			arrow.set_VerticalFilling( XEnum_Filling_Auto );
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.25f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.75f , 0.5f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.25f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			rux::XString error;
			group.AddControl( arrow , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::UpArrow( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XPath arrow;	
			arrow.set_HorizontalFilling( XEnum_Filling_Auto );
			arrow.set_VerticalFilling( XEnum_Filling_Auto );
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.25f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.5f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.75f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			rux::XString error;
			group.AddControl( arrow , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::DownArrow( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XPath arrow;	
			arrow.set_HorizontalFilling( XEnum_Filling_Auto );
			arrow.set_VerticalFilling( XEnum_Filling_Auto );
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.25f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.75f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.5f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			rux::XString error;
			group.AddControl( arrow , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::LeftArrowAndLine( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XPath arrow;	
			arrow.set_HorizontalFilling( XEnum_Filling_Auto );
			arrow.set_VerticalFilling( XEnum_Filling_Auto );	
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.325f , 0.5f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.825f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.825f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			rux::XString error;
			group.AddControl( arrow , error );
			rux::gui::controls::XRectangle rect;
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.225f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.05f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::LeftArrowAndThreeLines( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XPath arrow;	
			arrow.set_HorizontalFilling( XEnum_Filling_Auto );
			arrow.set_VerticalFilling( XEnum_Filling_Auto );
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.4f , 0.5f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.9f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.9f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			rux::XString error;
			group.AddControl( arrow , error );
			rux::gui::controls::XRectangle rect;
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.05f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.07f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.19f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.07f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.33f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.07f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::LeftArrowAndTwoLines( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XPath arrow;	
			arrow.set_HorizontalFilling( XEnum_Filling_Auto );
			arrow.set_VerticalFilling( XEnum_Filling_Auto );
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.4f , 0.5f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.9f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.9f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			rux::XString error;
			group.AddControl( arrow , error );
			rux::gui::controls::XRectangle rect;
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.19f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.07f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.33f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.07f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::RightArrowAndLine( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XPath arrow;	
			arrow.set_HorizontalFilling( XEnum_Filling_Auto );
			arrow.set_VerticalFilling( XEnum_Filling_Auto );
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.225f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.725f , 0.5f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.225f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			rux::XString error;
			group.AddControl( arrow , error );
			rux::gui::controls::XRectangle rect;
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.725f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.05f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::RightArrowAndThreeLines( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XPath arrow;	
			arrow.set_HorizontalFilling( XEnum_Filling_Auto );
			arrow.set_VerticalFilling( XEnum_Filling_Auto );
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.1f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.6f , 0.5f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.1f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			rux::XString error;
			group.AddControl( arrow , error );
			rux::gui::controls::XRectangle rect;
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.6f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.07f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.74f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.07f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.88f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.07f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::RightArrowAndTwoLines( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XPath arrow;	
			arrow.set_HorizontalFilling( XEnum_Filling_Auto );
			arrow.set_VerticalFilling( XEnum_Filling_Auto );
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.1f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.6f , 0.5f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.1f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			rux::XString error;
			group.AddControl( arrow , error );
			rux::gui::controls::XRectangle rect;
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.6f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.07f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.74f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.07f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::Pause( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );	
			rux::gui::controls::XRectangle rect;
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.35f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.1f );
			rect.set_Height( 0.5f );
			rux::XString error;
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.55f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.1f );
			rect.set_Height( 0.5f );
			group.AddControl( rect , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::Maximize( ::rux::gui::Color* background_object )
		{
			rux::gui::controls::XPath path;
			path.set_ControlName( "bullhorn" );
			path.set_IsSmooth( 0 );
			path.AddPoint( ::rux::gui::Point( 0.13f , 0.86f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.13f , 0.41f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.23f , 0.59f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.32f , 0.50f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.50f , 0.68f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.41f , 0.77f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.59f , 0.86f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.set_Left( 0 );
			path.set_Top( 0 );
			path.set_Width( 1 );
			path.set_Height( 1 );
			path.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			path.set_Background( background_object );
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::XString error;
			group.AddControl( path , error );
			path = ::rux::gui::controls::XPath();
			path.set_ControlName( "bullhorn" );
			path.set_IsSmooth( 0 );
			path.AddPoint( ::rux::gui::Point( 0.86f , 0.14f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.41f , 0.14f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.59f , 0.23f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.50f , 0.32f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.68f , 0.50f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.77f , 0.41f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.86f , 0.59f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.set_Left( 0 );
			path.set_Top( 0 );
			path.set_Width( 1 );
			path.set_Height( 1 );
			path.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			path.set_Background( background_object );
			group.AddControl( path , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::UnMaximize( ::rux::gui::Color* background_object )
		{
			rux::gui::controls::XPath path;
			path.set_ControlName( "bullhorn" );
			path.set_IsSmooth( 0 );
			path.AddPoint( ::rux::gui::Point( 0.50f , 0.05f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.50f , 0.50f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.95f , 0.50f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.77f , 0.41f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.86f , 0.32f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.68f , 0.14f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.59f , 0.23f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.set_Left( 0 );
			path.set_Top( 0 );
			path.set_Width( 1 );
			path.set_Height( 1 );
			path.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			path.set_Background( background_object );
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::XString error;
			group.AddControl( path , error );
			path = ::rux::gui::controls::XPath();
			path.set_ControlName( "bullhorn" );
			path.set_IsSmooth( 0 );
			path.AddPoint( ::rux::gui::Point( 0.50f , 0.95f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.50f , 0.50f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.05f , 0.50f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.23f , 0.59f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.14f , 0.68f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.32f , 0.86f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.41f , 0.77f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.set_Left( 0 );
			path.set_Top( 0 );
			path.set_Width( 1 );
			path.set_Height( 1 );
			path.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			path.set_Background( background_object );
			group.AddControl( path , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::Cross( ::rux::gui::Color* background_object , float )
		{
			rux::gui::controls::XPath path;
			path.set_IsSmooth( 0 );
			path.AddPoint( ::rux::gui::Point( 0.26f , 0.15f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.15f , 0.26f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.38f , 0.50f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.15f , 0.74f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.26f , 0.85f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.50f , 0.62f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.73f , 0.85f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.85f , 0.73f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.62f , 0.50f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.85f , 0.26f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.73f , 0.14f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.50f , 0.38f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.set_Left( 0 );
			path.set_Top( 0 );
			path.set_Width( 1 );
			path.set_Height( 1 );
			path.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			path.set_Background( background_object );
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::XString error;
			group.AddControl( path , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::Download( ::rux::gui::Color* background_object )
		{
			rux::gui::controls::XPath path;
			path.set_IsSmooth( 0 );
			path.AddPoint( ::rux::gui::Point( 0.50f , 0.96f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.12f , 0.58f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.27f , 0.58f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.27f , 0.04f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.73f , 0.04f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.73f , 0.58f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.88f , 0.58f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.set_Left( 0 );
			path.set_Top( 0 );
			path.set_Width( 1 );
			path.set_Height( 1 );
			path.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			path.set_Background( background_object );
			declare_variable( ::rux::gui::controls::XGroup , group );	
			rux::XString error;
			group.AddControl( path , error );	
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::RightFlag( ::rux::gui::Color* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );	
			rux::gui::controls::XRectangle rect;
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.2f );
			rect.set_Top( 0.2f );
			rect.set_Width( 0.1f );
			rect.set_Height( 0.6f );
			rux::XString error;
			group.AddControl( rect , error );	
			rect = ::rux::gui::controls::XRectangle();
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.3f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.5f );
			rect.set_Height( 0.3f );
			group.AddControl( rect , error );	
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::LeftFlag( ::rux::gui::Color* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );	
			rux::gui::controls::XRectangle rect;
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.2f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.5f );
			rect.set_Height( 0.3f );
			rux::XString error;
			group.AddControl( rect , error );		
			rect = ::rux::gui::controls::XRectangle();
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.7f );
			rect.set_Top( 0.2f );
			rect.set_Width( 0.1f );
			rect.set_Height( 0.6f );	
			group.AddControl( rect , error );	
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::Minimize( ::rux::gui::Color* background_object , float thickness )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );	
			rux::gui::controls::XLine line;
			line.set_Thickness( thickness );
			line.set_Color( background_object );
			line.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			line.set_StartLeft( 0.2f );
			line.set_StartTop( 0.6f );
			line.set_EndLeft( 0.8f );
			line.set_EndTop( 0.6f );
			rux::XString error;
			group.AddControl( line , error );	
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::MuteOn( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			declare_variable_param( ::rux::gui::controls::XGroup , child , MuteOff( background_object ) );
			child.set_HorizontalFilling( XEnum_Filling_Auto );
			child.set_VerticalFilling( XEnum_Filling_Auto );
			rux::XString error;
			group.AddControl( child , error );
			child = Cross( create_color( 255 , 0 , 0 , 255 ) , 2.6f );	
			child.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			child.set_Left( 0.4f );
			child.set_Top( 0.25f );
			child.set_Width( 0.5f );
			child.set_Height( 0.5f );	
			group.AddControl( child , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::MuteOff( ::rux::gui::ColorBase* background_object )
		{
			rux::gui::controls::XPath path;	
			path.set_ControlName( "bullhorn" );
			path.AddPoint( ::rux::gui::Point( 0.85f , 0.15f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.85f , 0.35f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.88f , 0.36f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.88f , 0.64f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.85f , 0.65f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.85f , 0.85f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.35f , 0.65f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.16f , 0.64f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.16f , 0.36f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.AddPoint( ::rux::gui::Point( 0.35f , 0.35f , ::rux::gui::XEnum_PointUnit_Percent ) );
			path.set_Left( 0 );
			path.set_Top( 0 );
			path.set_Width( 1 );
			path.set_Height( 1 );
			path.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			path.set_Background( background_object );
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::XString error;
			group.AddControl( path , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::Stop( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );	
			rux::gui::controls::XRectangle rect;
			rect.set_Background( background_object );
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.25f );
			rect.set_Top( 0.25f );
			rect.set_Width( 0.5f );
			rect.set_Height( 0.5f );
			rux::XString error;
			group.AddControl( rect , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::DoubleRightArrow( ::rux::gui::ColorBase* background_object )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XPath arrow;	
			arrow.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			arrow.set_Width( 0.5f );
			arrow.set_Height( 1.f );	
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.5f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 1.f , 0.5f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.5f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			rux::XString error;
			group.AddControl( arrow , error );
			arrow = ::rux::gui::controls::XPath();	
			arrow.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			arrow.set_Left( 0.5f );
			arrow.set_Width( 0.5f );
			arrow.set_Height( 1.f );	
			arrow.set_Background( background_object );
			arrow.AddPoint( ::rux::gui::Point( 0.f , 0.25f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.5f , 0.5f , ::rux::gui::XEnum_PointUnit_Percent ) );
			arrow.AddPoint( ::rux::gui::Point( 0.f , 0.75f , ::rux::gui::XEnum_PointUnit_Percent ) );
			group.AddControl( arrow , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::HorizontalDivider( ::rux::gui::XEnum_Alignment vertical_alignment , float top , float left , float width , ::rux::uint8 is_visible )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			group.set_IsVisible( is_visible );
			group.set_VerticalAlignment( vertical_alignment );	
			group.set_Top( top );
			group.set_Left( left );
			group.set_Width( width );
			group.set_Height( 2 );
			rux::gui::controls::XRectangle razdelitel;	
			razdelitel.set_Top( 1 );
			razdelitel.set_Height( 1 );
			razdelitel.set_HorizontalFilling( XEnum_Filling_Auto );
			razdelitel.set_Background( create_color( 0x88 , 0x88 , 0x88 , (uint8)( (double)0xff * 0.4 ) ) );
			rux::XString error;
			group.AddControl( razdelitel , error );
			razdelitel = ::rux::gui::controls::XRectangle();	
			razdelitel.set_Height( 1 );
			razdelitel.set_HorizontalFilling( XEnum_Filling_Auto );
			razdelitel.set_Background( create_color( 0x2c , 0x2c , 0x2c , 128 ) );
			group.AddControl( razdelitel , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::VerticalDivider( ::rux::gui::XEnum_Alignment horizontal_alignment , float top , float height , ::rux::uint8 is_visible )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			group.set_IsVisible( is_visible );
			group.set_HorizontalAlignment( horizontal_alignment );	
			group.set_Top( top );
			group.set_Width( 2 );
			group.set_Height( height );
			rux::gui::controls::XRectangle razdelitel;	
			razdelitel.set_Left( 1 );
			razdelitel.set_Width( 1 );
			razdelitel.set_Height( height );
			razdelitel.set_Background( create_color( 0x88 , 0x88 , 0x88 , (uint8)( (double)0xff * 0.4 ) ) );
			rux::XString error;
			group.AddControl( razdelitel , error );
			razdelitel = ::rux::gui::controls::XRectangle();	
			razdelitel.set_Width( 1 );
			razdelitel.set_Height( height );
			razdelitel.set_Background( create_color( 0x2c , 0x2c , 0x2c , 128 ) );
			group.AddControl( razdelitel , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::VerticalDivider( float left , float top , float height , ::rux::uint8 is_visible )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			group.set_IsVisible( is_visible );
			group.set_Left( left );	
			group.set_Top( top );
			group.set_Width( 2 );
			group.set_Height( height );
			rux::gui::controls::XRectangle razdelitel;	
			razdelitel.set_Left( 1 );
			razdelitel.set_Width( 1 );
			razdelitel.set_Height( height );
			razdelitel.set_Background( create_color( 0x88 , 0x88 , 0x88 , (uint8)( (double)0xff * 0.4 ) ) );
			rux::XString error;
			group.AddControl( razdelitel , error );
			razdelitel = ::rux::gui::controls::XRectangle();	
			razdelitel.set_Width( 1 );
			razdelitel.set_Height( height );
			razdelitel.set_Background( create_color( 0x2c , 0x2c , 0x2c , 128 ) );
			group.AddControl( razdelitel , error );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::Calendar( void )
		{
			declare_variable( ::rux::gui::controls::XGroup , calendar );
			return calendar++;
		};
		rux::gui::controls::Group& XPrimitives::VerticalMargin( float height , ::rux::gui::XEnum_Alignment vertical_alignment )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			group.set_HorizontalFilling( XEnum_Filling_Auto );
			group.set_VerticalAlignment( vertical_alignment );
			group.set_Height( height );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::HorizontalMargin( float width , ::rux::gui::XEnum_Alignment horizontal_alignment )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			group.set_VerticalFilling( XEnum_Filling_Auto );
			group.set_HorizontalAlignment( horizontal_alignment );
			group.set_Width( width );
			return group++;
		};
		rux::gui::controls::Group& XPrimitives::Loader( void )
		{
			declare_variable( ::rux::gui::controls::XGroup , group );
			rux::gui::controls::XRectangle rect;
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.375f );
			rect.set_Width( 0.25f );
			rect.set_Height( 0.25f );
			rect.set_Background( ::rux::gui::Colors::White() );
			rect.set_Corner( ::rux::gui::Thickness( 1 , 1 , 1, 1 ) );
			rux::XString error;
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.625f );
			rect.set_Top( 0.125f );
			rect.set_Width( 0.25f );
			rect.set_Height( 0.25f );
			rect.set_Background( ::rux::gui::Colors::White() );
			rect.set_Corner( ::rux::gui::Thickness( 1 , 1 , 1, 1 ) );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.75f );
			rect.set_Top( 0.375f );
			rect.set_Width( 0.25f );
			rect.set_Height( 0.25f );
			rect.set_Background( ::rux::gui::Colors::White() );
			rect.set_Corner( ::rux::gui::Thickness( 1 , 1 , 1, 1 ) );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.625f );
			rect.set_Top( 0.625f );
			rect.set_Width( 0.25f );
			rect.set_Height( 0.25f );
			rect.set_Background( ::rux::gui::Colors::White() );
			rect.set_Corner( ::rux::gui::Thickness( 1 , 1 , 1, 1 ) );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.375f );
			rect.set_Top( 0.75f );
			rect.set_Width( 0.25f );
			rect.set_Height( 0.25f );
			rect.set_Background( ::rux::gui::Colors::White() );
			rect.set_Corner( ::rux::gui::Thickness( 1 , 1 , 1, 1 ) );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.125f );
			rect.set_Top( 0.625f );
			rect.set_Width( 0.25f );
			rect.set_Height( 0.25f );
			rect.set_Background( ::rux::gui::Colors::White() );
			rect.set_Corner( ::rux::gui::Thickness( 1 , 1 , 1, 1 ) );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );	
			rect.set_Top( 0.375f );
			rect.set_Width( 0.25f );
			rect.set_Height( 0.25f );
			rect.set_Background( ::rux::gui::Colors::White() );
			rect.set_Corner( ::rux::gui::Thickness( 1 , 1 , 1, 1 ) );
			group.AddControl( rect , error );
			rect = ::rux::gui::controls::XRectangle();
			rect.set_PointUnit( ::rux::gui::XEnum_PointUnit_Percent );
			rect.set_Left( 0.125f );
			rect.set_Top( 0.125f );
			rect.set_Width( 0.25f );
			rect.set_Height( 0.25f );
			rect.set_Background( ::rux::gui::Colors::White() );
			rect.set_Corner( ::rux::gui::Thickness( 1 , 1 , 1, 1 ) );
			group.AddControl( rect , error );
			return group++;
		};
		void XPrimitives::LoaderAnimation( ::rux::gui::controls::XGroup& loader , XGroupAnimation& group_animation , uint64 one_step_duration )
		{	
			XArray< ::rux::gui::controls::XRectangle > rects;
			rects.set_ByRef( loader.Find< ::rux::gui::controls::XRectangle >() );
			XAnimation animation;	
			::rux::uint64 timeline = one_step_duration;
			::rux::uint64 total_timeline = ( rects.Count() + 2 ) * one_step_duration;
			for( ::rux::uint32 index0 = 0 ; index0 < rects.Count() ; index0++ )
			{
				animation = XAnimation();
				animation.set_Control( XObject( rects[ index0 ] ) );
				animation.set_AnimationSetValueType( XEnum_AnimationSetValueType_Instant );
				animation.set_StartValue( create_color( 255 , 255 , 255 , 128 ) );
				animation.set_PropertyName( "Background" );
				animation.AddTimeline( timeline , create_color( 255 , 255 , 255 , 255 ) );
				animation.AddTimeline( total_timeline - timeline , create_color( 255 , 255 , 255 , 128 ) );
				timeline += one_step_duration;		
				group_animation.AddAnimation( animation );			
			}	
		};
	};
};